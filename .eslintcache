[{"D:\\Works\\Encoder\\web3-encoder\\src\\index.js":"1","D:\\Works\\Encoder\\web3-encoder\\src\\App.js":"2","D:\\Works\\Encoder\\web3-encoder\\src\\reportWebVitals.js":"3","D:\\Works\\Encoder\\web3-encoder\\src\\Components\\MainPage\\index.jsx":"4","D:\\Works\\Encoder\\web3-encoder\\src\\Components\\Connect\\index.jsx":"5","D:\\Works\\Encoder\\web3-encoder\\src\\Components\\Execute\\index.jsx":"6","D:\\Works\\Encoder\\web3-encoder\\src\\Components\\Decode\\index.jsx":"7","D:\\Works\\Encoder\\web3-encoder\\src\\Components\\Encode\\index.jsx":"8"},{"size":500,"mtime":1642577625430,"results":"9","hashOfConfig":"10"},{"size":135,"mtime":1642447526300,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":1759,"mtime":1642616046484,"results":"13","hashOfConfig":"10"},{"size":246,"mtime":1642616067125,"results":"14","hashOfConfig":"10"},{"size":2763,"mtime":1642603448810,"results":"15","hashOfConfig":"10"},{"size":2904,"mtime":1642619499251,"results":"16","hashOfConfig":"10"},{"size":4764,"mtime":1642619449171,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1da4d5g",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"D:\\Works\\Encoder\\web3-encoder\\src\\index.js",[],"D:\\Works\\Encoder\\web3-encoder\\src\\App.js",[],"D:\\Works\\Encoder\\web3-encoder\\src\\reportWebVitals.js",[],"D:\\Works\\Encoder\\web3-encoder\\src\\Components\\MainPage\\index.jsx",["39"],"import React, { useEffect } from 'react';\r\nimport Connect from \"../Connect\";\r\nimport Execute from \"../Execute\";\r\nimport Web3 from 'web3';\r\nimport Decode from \"../Decode\";\r\nimport Encode from \"../Encode\";\r\n\r\nexport default function MainPage(){\r\n\r\n    const [isConnect,setIsConnect] = React.useState(false);\r\n    const [account,setAccount] = React.useState();\r\n    const [web3,setWeb3] = React.useState();\r\n\r\n    const getProvider = ()=>{\r\n        let provider;\r\n        if(window.ethereum){\r\n            provider=window.ethereum\r\n            \r\n        }else{\r\n            window.alert(\"No metamask present\")\r\n        }\r\n        return provider\r\n    }\r\n    const handleConnect = ()=>{\r\n        let provider =  getProvider();\r\n        if(provider == window.ethereum){\r\n            console.log(\"in click true\")\r\n             provider.request({\r\n                method:'eth_requestAccounts',\r\n            }).then(account=>{\r\n                console.log(\"in click then\")\r\n                setAccount(account[0])\r\n                setIsConnect(true)\r\n            }).catch(err=>{\r\n                console.log(\"in click error  \",err)\r\n            })\r\n        }\r\n        setWeb3(new Web3(provider))\r\n\r\n    }\r\n\r\n    useEffect(()=>{\r\n        console.log(\"in click account \",account)\r\n    },[account])\r\n\r\n    return(\r\n        <>  \r\n            {isConnect ? \r\n            <Connect handleConnect={handleConnect} message=\"connected to metamask\"/> : \r\n            <Connect handleConnect={handleConnect} message=\"connect to metamask\"/>\r\n            }\r\n            \r\n            <Execute web3={web3} account={account} isConnect={isConnect}/>\r\n            <Encode web3={web3} isConnect={isConnect}/>\r\n            <Decode web3={web3} isConnect={isConnect}/>\r\n        </>\r\n    )\r\n}\r\n","D:\\Works\\Encoder\\web3-encoder\\src\\Components\\Connect\\index.jsx",[],"D:\\Works\\Encoder\\web3-encoder\\src\\Components\\Execute\\index.jsx",["40","41"],"import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nexport default function Execute(props) {\r\n  const [toAddress, setToAddress] = React.useState();\r\n  const [encodedData, setEncodedData] = React.useState();\r\n  const [checkAddress,setCheckAddress] = React.useState(false);\r\n  const [checkData,setCheckData] = React.useState(false);\r\n\r\n  const handleSent = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"in sent  \", encodedData);\r\n    if (\r\n      /^(0x){1}[0-9a-fA-F]{40}$/i.test(toAddress) &&\r\n      props.web3.utils.isAddress(toAddress) &&\r\n      toAddress != \"0x0000000000000000000000000000000000000000\"\r\n    ) {\r\n        \r\n        if(encodedData!=null&&encodedData!=undefined) \r\n        {   \r\n            if(encodedData.trim() !== \"\")\r\n            {\r\n                console.log(\"in sent true\")    \r\n                try \r\n                {\r\n                    props.web3.eth.sendTransaction({\r\n                    from: props.account,\r\n                    to: toAddress,\r\n                    data: encodedData,\r\n                    });\r\n                } catch (err) {\r\n                    console.log(\"err \", err);\r\n                }\r\n                \r\n            }else{\r\n                setCheckData(\"Please enter the field\") \r\n            }\r\n        }else{\r\n            setCheckData(\"Please enter the field\")\r\n        }\r\n    }else{\r\n        setCheckAddress(\"Please enter valid address\")\r\n    }\r\n    \r\n  };\r\n\r\n  const handleNone = (event)=>{\r\n      event.preventDefault();\r\n  }\r\n\r\n  const handleToAddress = (event) => {\r\n    if(checkAddress)\r\n        setCheckAddress(false)\r\n    setToAddress(event.target.value);\r\n  };\r\n\r\n  const handleEncodedData = (event) => {\r\n    if(checkData)\r\n        setCheckData(false);\r\n    setEncodedData(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <div onClick={handleSent}>sent</div> */}\r\n      <form onSubmit={props.isConnect ? handleSent : handleNone}>\r\n        <div className=\"execute-main-container\">\r\n          <p>To Address*</p>\r\n          <input\r\n            className=\"input-box-to-address\"\r\n            type=\"text\"\r\n            value={toAddress}\r\n            placeholder=\"Address\"\r\n            onChange={handleToAddress}\r\n          />\r\n          <p className=\"check-warning\">{checkAddress}</p>\r\n          <p>Encoded data*</p>\r\n          <textarea\r\n            className=\"text-area-box-for-data\"\r\n            value={encodedData}\r\n            placeholder=\"Encoded data\"\r\n            onChange={handleEncodedData}\r\n          />\r\n          <p className=\"check-warning\">{checkData}</p>\r\n          <button  className={props.isConnect ? \"button-for-execute\" : \"button-for-execute-disable\"} type=\"submit\">\r\n            Execute\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n",["42","43"],"D:\\Works\\Encoder\\web3-encoder\\src\\Components\\Decode\\index.jsx",["44","45","46","47"],"import React from \"react\";\r\n\r\nexport default function Execute({web3,isConnect}) {\r\n\r\n    const [dataTypes,setdDtaTypes] = React.useState()\r\n    const [encodedData, setEncodedData] = React.useState()\r\n    const [checkdataTypes,setCheckDataTypes] = React.useState(false);\r\n    const [checkData,setCheckData] = React.useState(false);\r\n    const [result,setResult] = React.useState();\r\n\r\n    const handleDecode = async(event)=>{\r\n        let dataArray = null;\r\n        event.preventDefault();\r\n        if(dataTypes!=null&&dataTypes!=undefined){\r\n            if(dataTypes.trim()!=\"\"){\r\n                dataArray = dataTypes.split(\",\");\r\n                if(encodedData!=null&&encodedData!=undefined){\r\n                    if(encodedData.trim()!=\"\"){\r\n                        console.log(\"in sent \",dataArray,\"   \",encodedData.toString())\r\n                        console.log(\"in sent after \",web3.eth.abi.decodeParameters(dataArray,encodedData.toString()))\r\n                        setResult(web3.eth.abi.decodeParameters(dataArray,encodedData.toString()));\r\n                    }else{\r\n                        setCheckData(\"Please enter encoded data\") \r\n                    }\r\n                }else{\r\n                    setCheckData(\"Please enter encoded data\") \r\n                }\r\n            }else{\r\n                setCheckDataTypes(\"Please enter valid data types\")\r\n            }\r\n        }else{\r\n            setCheckDataTypes(\"Please enter valid data types\")\r\n        }\r\n    }\r\n\r\n    const handleNone = (event)=>{\r\n        event.preventDefault();\r\n    }\r\n\r\n    const handleDataTypes = (event) => {\r\n        if(checkdataTypes)\r\n            setCheckDataTypes(false)\r\n        setdDtaTypes(event.target.value);\r\n      };\r\n    \r\n      const handleEncodedData = (event) => {\r\n        if(checkData)\r\n            setCheckData(false);\r\n        setEncodedData(event.target.value);\r\n      };\r\n\r\n    return(\r\n        <>\r\n        <form onSubmit={isConnect ? handleDecode : handleNone}>\r\n        <div className=\"execute-main-container\">\r\n          <p>Data Types*</p>\r\n          <input\r\n            className=\"input-box-to-address\"\r\n            type=\"text\"\r\n            value={dataTypes}\r\n            placeholder=\"eg: uint256,address,address[] etc\"\r\n            onChange={handleDataTypes}\r\n          />\r\n          <p className=\"check-warning\">{checkdataTypes}</p>\r\n          <p>Encoded data*</p>\r\n          <textarea\r\n            className=\"text-area-box-for-data\"\r\n            value={encodedData}\r\n            placeholder=\"Encoded data\"\r\n            onChange={handleEncodedData}\r\n          />\r\n          <p className=\"check-warning\">{checkData}</p>\r\n          <button  className={isConnect ? \"button-for-execute\" : \"button-for-execute-disable\"} type=\"submit\">\r\n            Decode\r\n          </button>\r\n          <p className=\"result\">{JSON.stringify(result)}</p>\r\n        </div>\r\n      </form>\r\n        </>\r\n    )\r\n}","D:\\Works\\Encoder\\web3-encoder\\src\\Components\\Encode\\index.jsx",["48","49","50","51","52","53","54","55","56"],"import React from \"react\";\r\n\r\nexport default function Encode({web3,isConnect}) {\r\n\r\n  const [checkAddress,setCheckAddress] = React.useState(false);\r\n  const [checkData,setCheckData] = React.useState(false);\r\n\r\n  const [fnName,setFnName] = React.useState();\r\n  const [inputTypes,setInputTypes] = React.useState();\r\n  const [values,setValues] = React.useState();\r\n\r\n  const [checkFnName,setCheckFnName] = React.useState(false);\r\n  const [checkInputTypes,setCheckInputTypes] = React.useState(false);\r\n  const [checkValues,setCheckValues] = React.useState(false);\r\n\r\n  const [result,setResult] = React.useState();\r\n\r\n  const check = ()=>{\r\n    console.log(\"in sent before checkFnName \",fnName!=null,fnName!=undefined);\r\n    if(fnName!=null&&fnName!=undefined){\r\n        if(fnName.trim()!=\"\"){\r\n            setCheckFnName(false)\r\n        }else{\r\n            setCheckFnName(\"Please enter function name\")\r\n        }\r\n    }else{\r\n        console.log(\"in sent before checkFnName else\")\r\n        setCheckFnName(\"Please enter function name\")\r\n    }\r\n    console.log(\"in sent before checkInputTypes\")\r\n    if(inputTypes!=null&&inputTypes!=undefined){\r\n        if(inputTypes.trim()!=\"\"){\r\n            setCheckInputTypes(false)\r\n        }else{\r\n            setCheckInputTypes(\"Please enter input types\")\r\n        }\r\n    }else{\r\n        setCheckInputTypes(\"Please enter input types\")\r\n    }\r\n    console.log(\"in sent before checkValues\")\r\n    if(values!=null&&values!=undefined){\r\n        if(values.trim()!=\"\"){\r\n            setCheckValues(false)\r\n        }else{\r\n            setCheckValues(\"Please enter input values\")\r\n        }\r\n    }else{\r\n        setCheckValues(\"Please enter input values\")\r\n    }\r\n  }\r\n\r\n  const handleEncode = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"in sent before check\")\r\n    check()\r\n    console.log(\"in sent after check\")\r\n    if(!checkFnName&&!checkValues&&!checkInputTypes){\r\n\r\n        let dummyParamName = \"dummy\";\r\n        let obj ={}\r\n        \r\n        let inputList = inputTypes.split(\",\")\r\n        console.log(\"in sent here after list 1 \",inputList)\r\n        let valuesList =  values.split(\",\")\r\n        console.log(\"in sent here before list 2 \",valuesList)\r\n        let input = []\r\n        for(let i = 0;i<inputList.length;i++) {\r\n            obj[\"type\"] = inputList[i]\r\n            obj[\"name\"] = dummyParamName\r\n            input.push(obj)\r\n        }\r\n        console.log(\"in sent object array \",input)\r\n        // let result = web3.eth.abi.encodeFunctionCall({\r\n        //     name: fnName,\r\n        //     type: 'function',\r\n        //     inputs: input\r\n        // }, valuesList);\r\n\r\n        console.log(\"in sent res \",result)\r\n        setResult(web3.eth.abi.encodeFunctionCall({\r\n            name: fnName,\r\n            type: 'function',\r\n            inputs: input\r\n        }, valuesList))\r\n    }else{\r\n        console.log(\"in sent no value\")\r\n    }\r\n    \r\n    \r\n    \r\n  };\r\n\r\n  const handleNone = (event)=>{\r\n    event.preventDefault();\r\n  }\r\n\r\n  const handleFnName = (event) => {\r\n    if(checkAddress)\r\n        setCheckFnName(false)\r\n    setFnName(event.target.value);\r\n  };\r\n\r\n  const handleInputTypes = (event) => {\r\n    if(checkData)\r\n        setCheckInputTypes(false);\r\n    setInputTypes(event.target.value);\r\n  };\r\n\r\n  const handleValues = (event) => {\r\n    if(checkData)\r\n        setCheckValues(false);\r\n    setValues(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <div onClick={handleSent}>sent</div> */}\r\n      <form onSubmit={isConnect ? handleEncode : handleNone}>\r\n        <div className=\"execute-main-container\">\r\n          <p>Function Name*</p>\r\n          <input\r\n            className=\"input-box-to-address\"\r\n            type=\"text\"\r\n            value={fnName}\r\n            placeholder=\"Function name\"\r\n            onChange={handleFnName}\r\n          />\r\n          <p className=\"check-warning\">{checkFnName}</p>\r\n          <p>Input types*</p>\r\n          <input\r\n            className=\"input-box-to-address\"\r\n            type=\"text\"\r\n            value={inputTypes}\r\n            placeholder=\"eg: uint256,string\"\r\n            onChange={handleInputTypes}\r\n          />\r\n          <p className=\"check-warning\">{checkInputTypes}</p>\r\n          <p>Input values of params*</p>\r\n          <input\r\n            className=\"input-box-to-address\"\r\n            type=\"text\"\r\n            value={values}\r\n            placeholder=\"eg: 7,hello\"\r\n            onChange={handleValues}\r\n          />\r\n          <p className=\"check-warning\">{checkValues}</p>\r\n          <button  className={isConnect ? \"button-for-execute\" : \"button-for-execute-disable\"} type=\"submit\">\r\n            Encode Function\r\n          </button>\r\n          <p className=\"result\">{result}</p>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n",{"ruleId":"57","severity":1,"message":"58","line":26,"column":21,"nodeType":"59","messageId":"60","endLine":26,"endColumn":23},{"ruleId":"57","severity":1,"message":"61","line":16,"column":17,"nodeType":"59","messageId":"60","endLine":16,"endColumn":19},{"ruleId":"57","severity":1,"message":"61","line":19,"column":42,"nodeType":"59","messageId":"60","endLine":19,"endColumn":44},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"57","severity":1,"message":"61","line":14,"column":38,"nodeType":"59","messageId":"60","endLine":14,"endColumn":40},{"ruleId":"57","severity":1,"message":"61","line":15,"column":32,"nodeType":"59","messageId":"60","endLine":15,"endColumn":34},{"ruleId":"57","severity":1,"message":"61","line":17,"column":50,"nodeType":"59","messageId":"60","endLine":17,"endColumn":52},{"ruleId":"57","severity":1,"message":"61","line":18,"column":42,"nodeType":"59","messageId":"60","endLine":18,"endColumn":44},{"ruleId":"66","severity":1,"message":"67","line":5,"column":23,"nodeType":"68","messageId":"69","endLine":5,"endColumn":38},{"ruleId":"66","severity":1,"message":"70","line":6,"column":20,"nodeType":"68","messageId":"69","endLine":6,"endColumn":32},{"ruleId":"57","severity":1,"message":"61","line":19,"column":66,"nodeType":"59","messageId":"60","endLine":19,"endColumn":68},{"ruleId":"57","severity":1,"message":"61","line":20,"column":28,"nodeType":"59","messageId":"60","endLine":20,"endColumn":30},{"ruleId":"57","severity":1,"message":"61","line":21,"column":25,"nodeType":"59","messageId":"60","endLine":21,"endColumn":27},{"ruleId":"57","severity":1,"message":"61","line":31,"column":36,"nodeType":"59","messageId":"60","endLine":31,"endColumn":38},{"ruleId":"57","severity":1,"message":"61","line":32,"column":29,"nodeType":"59","messageId":"60","endLine":32,"endColumn":31},{"ruleId":"57","severity":1,"message":"61","line":41,"column":28,"nodeType":"59","messageId":"60","endLine":41,"endColumn":30},{"ruleId":"57","severity":1,"message":"61","line":42,"column":25,"nodeType":"59","messageId":"60","endLine":42,"endColumn":27},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'setCheckAddress' is assigned a value but never used.","Identifier","unusedVar","'setCheckData' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]